!function(){"use strict";!function(){class AltTitle extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}render(){const t=this.getAttribute("color")||"var(--white)",n=this.getAttribute("text-color")||"var(--text)",e=this.getAttribute("format")||"center";this.shadowRoot.innerHTML=`\n                <style>\n                    :host {\n                        display: flex;\n                        position: relative;\n                        text-align: ${e};\n                        align-items: center;\n                        justify-content: ${e};\n                        padding: 0 40px;\n                        color: ${n};\n                        font-weight: bold;\n                        font-size: var(--medium-text);\n                        width: calc(100% - 80px);\n                        background-color: ${t};\n                    }\n                    .alt-title-text {\n                        display: inline-block;\n                    }\n                </style>\n                <div class="alt-title-text"><slot></slot></div>\n            `}}customElements.define("m-alt-title",AltTitle)}(),function(){class Announcement extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.schedule=[]}async loadSchedule(){try{const t=await fetch("./schedule.json");if(!t.ok)throw new Error("Network response was not ok");this.schedule=await t.json()}catch(t){console.error("Failed to load schedule:",t),this.schedule=[]}}async connectedCallback(){await this.loadSchedule(),this.checkSchedule(),this.render()}static get observedAttributes(){return["color","text-color","animation"]}attributeChangedCallback(t,n,e){n!==e&&this.render()}checkSchedule(){const t=new Date,n=t.toLocaleDateString("en-US",{weekday:"long"}),e=t.toISOString().split("T")[0],o=this.schedule.filter((t=>t.start<=e&&t.end>=e&&!t.hide&&"a"===t.type&&(!t.days||t.days.includes(n))));if(o.sort(((t,n)=>(t.priority||0)-(n.priority||0))),o.length>0){const t=o[0];this.setAttribute("color",t.color),this.setAttribute("text-color",t.textColor),this.setAttribute("animation",t.animation||"none"),t.link?this.innerHTML=`<a href="${t.link}" style="color: inherit; text-decoration: none;">${t.text}</a>`:this.innerHTML=t.text,t.text.length>100&&console.warn("The content of the announcement is more than 100 characters and may not render correctly on some phones.\n\n*Please disregard if using lots of HTML formatting."),this.dispatchEvent(new CustomEvent("announcement-displayed",{detail:t}))}else this.style.display="none",this.dispatchEvent(new CustomEvent("no-announcement"))}render(){const t=this.getAttribute("color")||"var(--color-light)",n=this.getAttribute("text-color")||"var(--text)",e=this.getAttribute("animation")||"none";this.shadowRoot.innerHTML=`\n                <style>\n                    :host {\n                        display: flex;\n                        position: relative;\n                        text-align: center;\n                        align-items: center;\n                        justify-content: center;\n                        color: ${n};\n                        font-weight: bold;\n                        height: 8vh;\n                        width: 100%;\n                        background-color: ${t};\n                        ${{none:"",fade:"opacity: 0; animation: fade-in 1s forwards;",slide:"transform: translateY(-100%); animation: slide-in 0.5s forwards;",jitter:"animation: jitter 0.2s infinite;","letters-fly-in":"animation: letters-fly-in 1s forwards;","rainbow-swoosh":"animation: rainbow-swoosh 2s forwards;","zoom-in":"animation: zoom-in 0.5s forwards;",bounce:"animation: bounce 1s forwards;","slide-from-left":"transform: translateX(-100%); animation: slide-from-left 0.5s forwards;",rotate:"animation: rotate 1s forwards;","fade-and-scale":"transform: scale(0); animation: fade-and-scale 1s forwards;"}[e]}\n                    }\n                    .announcement-text {\n                        display: inline-block;\n                        padding: 10px 0; /* Added vertical padding */\n                    }\n                    @keyframes fade-in {\n                        to { opacity: 1; }\n                    }\n                    @keyframes slide-in {\n                        to { transform: translateY(0); }\n                    }\n                    @keyframes jitter {\n                        0%, 100% { transform: translateX(0); }\n                        25% { transform: translateX(-2px); }\n                        50% { transform: translateX(2px); }\n                        75% { transform: translateX(-2px); }\n                    }\n                    @keyframes letters-fly-in {\n                        0% { opacity: 0; transform: translateY(-100%); }\n                        100% { opacity: 1; transform: translateY(0); }\n                    }\n                    @keyframes rainbow-swoosh {\n                        0% { background-position: 0% 50%; }\n                        50% { background-position: 100% 50%; }\n                        100% { background-position: 0% 50%; }\n                    }\n                    @keyframes zoom-in {\n                        from { transform: scale(0); }\n                        to { transform: scale(1); }\n                    }\n                    @keyframes bounce {\n                        0%, 100% { transform: translateY(0); }\n                        50% { transform: translateY(-20px); }\n                    }\n                    @keyframes slide-from-left {\n                        from { transform: translateX(-100%); }\n                        to { transform: translateX(0); }\n                    }\n                    @keyframes rotate {\n                        from { transform: rotate(0deg); }\n                        to { transform: rotate(360deg); }\n                    }\n                    @keyframes fade-and-scale {\n                        from { opacity: 0; transform: scale(0); }\n                        to { opacity: 1; transform: scale(1); }\n                    }\n                </style>\n                <div class="announcement-text" role="alert" aria-live="assertive"><slot></slot></div>\n            `}}customElements.define("m-announcement",Announcement)}(),function(){class ImageCarousel extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.currentIndex=0,this.timer=null,this.images=[]}connectedCallback(){this.loadImages()}static get observedAttributes(){return["width","height","border-width","border-color","timer","images"]}attributeChangedCallback(t,n,e){n!==e&&("images"===t?this.loadImages():this.render(),"timer"===t&&this.timer&&this.startTimer())}loadImages(){const t=this.getAttribute("images");t&&(t.includes(".")?(this.images=t.split(/\s+/),this.render(),this.setupEventListeners(),this.startTimer()):this.loadImagesFromFolder(t))}loadImagesFromFolder(t){t=t.replace(/^\//,"");const n=[".jpg",".jpeg",".png",".gif",".webp"];fetch(t).then((t=>t.text())).then((t=>{const e=(new DOMParser).parseFromString(t,"text/html"),o=Array.from(e.querySelectorAll("a"));this.images=o.map((t=>t.href)).filter((t=>{return e=t,n.some((t=>e.toLowerCase().endsWith(t)));var e})).map((t=>new URL(t,window.location.href).pathname)),this.render(),this.setupEventListeners(),this.startTimer()})).catch((t=>{console.error("Error loading images from folder:",t),this.images=[],this.render()}))}render(){const t=this.getAttribute("width")||"100%",n=this.getAttribute("height")||"400px",e=this.getAttribute("border-width")||"0px",o=this.getAttribute("border-color")||"var(--color-light)";this.shadowRoot.innerHTML=`\n          <style>\n            :host {\n              display: block;\n              width: ${t};\n              height: ${n};\n              position: relative;\n              overflow: hidden;\n            }\n            .carousel-container {\n              width: 100%;\n              height: 100%;\n              display: flex;\n              transition: transform 0.5s ease;\n            }\n            .carousel-item {\n              flex: 0 0 100%;\n              height: 100%;\n            }\n            img {\n              width: 100%;\n              height: 100%;\n              object-fit: cover;\n              border: ${e} solid ${o};\n              box-sizing: border-box;\n            }\n            .nav-button {\n              position: absolute;\n              top: 50%;\n              transform: translateY(-50%);\n              background: rgba(0, 0, 0, 0.5);\n              color: white;\n              border: none;\n              padding: 10px;\n              cursor: pointer;\n              font-size: 18px;\n            }\n            .prev { left: 10px; }\n            .next { right: 10px; }\n            .dots-container {\n              position: absolute;\n              bottom: 10px;\n              left: 50%;\n              transform: translateX(-50%);\n              display: flex;\n            }\n            .dot {\n              width: 10px;\n              height: 10px;\n              border-radius: 50%;\n              background: rgba(255, 255, 255, 0.5);\n              margin: 0 5px;\n              cursor: pointer;\n            }\n            .dot.active {\n              background: white;\n            }\n          </style>\n          <div class="carousel-container">\n            ${this.images.map((t=>`<div class="carousel-item"><img src="${t}" alt="Carousel image"></div>`)).join("")}\n          </div>\n          <button class="nav-button prev">◀</button>\n          <button class="nav-button next">▶</button>\n          <div class="dots-container">\n            ${this.images.map(((t,n)=>`<div class="dot${0===n?" active":""}"></div>`)).join("")}\n          </div>\n        `,this.updateCarousel()}setupEventListeners(){const t=this.shadowRoot.querySelector(".prev"),n=this.shadowRoot.querySelector(".next"),e=this.shadowRoot.querySelectorAll(".dot");t.addEventListener("click",(()=>this.navigate(-1))),n.addEventListener("click",(()=>this.navigate(1))),e.forEach(((t,n)=>{t.addEventListener("click",(()=>this.goToSlide(n)))}))}navigate(t){this.currentIndex=(this.currentIndex+t+this.images.length)%this.images.length,this.updateCarousel(),this.stopTimer()}goToSlide(t){this.currentIndex=t,this.updateCarousel(),this.stopTimer()}updateCarousel(){const t=this.shadowRoot.querySelector(".carousel-container");if(t){t.style.transform=`translateX(-${100*this.currentIndex}%)`;this.shadowRoot.querySelectorAll(".dot").forEach(((t,n)=>{t.classList.toggle("active",n===this.currentIndex)}))}}startTimer(){this.stopTimer();const t=parseInt(this.getAttribute("timer"))||5e3;this.timer=setInterval((()=>{this.currentIndex=(this.currentIndex+1)%this.images.length,this.updateCarousel()}),t)}stopTimer(){this.timer&&(clearInterval(this.timer),this.timer=null)}}customElements.define("m-carousel",ImageCarousel)}(),function(){class Download extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}render(){const t=this.getAttribute("href"),n=this.getAttribute("name")||"Form";t?this.shadowRoot.innerHTML=`\n            <style>\n              a {\n                text-decoration: none;\n              }\n            </style>\n            <a href="${t}" download="${n}">\n              <slot>${n}</slot>\n            </a>\n          `:console.error("<m-download> requires an href attribute.")}}customElements.define("m-download",Download)}(),function(){class Dropdown extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render(),this.shadowRoot.querySelector(".title").addEventListener("click",(()=>{const t=this.shadowRoot.querySelector(".content"),n=this.shadowRoot.querySelector(".arrow");"block"===t.style.display?(t.style.display="none",n.style.transform="rotate(0deg)"):(t.style.display="block",n.style.transform="rotate(180deg)")})),document.addEventListener("click",(t=>{this.contains(t.target)||(this.shadowRoot.querySelector(".content").style.display="none",this.shadowRoot.querySelector(".arrow").style.transform="rotate(0deg)")}))}static get observedAttributes(){return["position"]}attributeChangedCallback(t,n,e){"position"===t&&this.render()}render(){const t=this.getAttribute("position")||"center";let n=this.getAttribute("content");n=n?n.replace(/\(\(/g,"<").replace(/\)\)/g,">").replace(/\'\'/g,'"'):"<slot></slot>",this.shadowRoot.innerHTML=`\n                <style>\n                    .title, .content {\n                        display: flex;\n                        position: relative;\n                        text-align: ${t};\n                        align-items: center;\n                        padding: 30px 40px;\n                        justify-content: ${t};\n                        color: var(--text);\n                        width: calc(100vw - 80px);\n                        background-color: ${this.getAttribute("color")||"var(--white)"};\n                        cursor: pointer;\n                    }\n                    .title {\n                        font-weight: bold;\n                        font-size: var(--medium-text);\n                        user-select: none;\n                    }\n                    .content {\n                        display: none;\n                        overflow: hidden;\n                        font-weight: normal;\n                        font-size: var(--normal-text);\n                        padding-top: 0;\n                        user-select: text;\n                    }\n                    .arrow {\n                        display: inline-block;\n                        transition: transform 0.3s ease-in-out;\n                    }\n                </style>\n                <div class="title">${this.getAttribute("title")||"TITLE"}&nbsp&nbsp&nbsp<span class="arrow">▽</span></div>\n                <div class="content">${n}</div>\n            `}}window.customElements.define("m-dropdown",Dropdown)}(),function(){class Image extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}render(){const t=this.getAttribute("src"),n=this.getAttribute("alt")||"An Image",e=this.getAttribute("width")||"100%",o=this.getAttribute("height")||"100%";this.shadowRoot.innerHTML=`\n                <style>\n                    .container {\n                        width: ${e}px;\n                        height: ${o}px;\n                        overflow: hidden;\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;\n                    }\n                    img {\n                        object-fit: cover;\n                    }\n                </style>\n                <div class="container">\n                    <img src="${t}" alt="${n}" width="${e}" height="${o}">\n                </div>\n            `}}customElements.define("m-image",Image)}(),function(){class InfoCard extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}render(){const t=this.getAttribute("name"),n=this.getAttribute("role"),e=this.getAttribute("email"),o=this.getAttribute("bio");this.shadowRoot.innerHTML=`\n            <style>\n              :host {\n                display: block;\n                position: relative;\n                margin: 0px 40px;\n                cursor: pointer;\n                font-family: Arial, sans-serif;\n              }\n              .name-role {\n                font-size: var(--normal-text);\n                font-weight: bold;\n                color: var(--color-dark);\n                background: var(--color-light-gray);\n                padding: 10px;\n                border-radius: 5px;\n                transition: background-color 0.3s ease;\n                width: 100%;\n                box-sizing: border-box;\n              }\n              .name-role.show {\n                background-color: var(--color-light);\n                border-radius: 8px 8px 0 0;\n                border: 1px solid var(--color-dark-gray);\n                border-bottom: none;\n              }\n              .card {\n                background-color: var(--white);\n                border-radius: 8px;\n                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n                transition: opacity 0.3s ease;\n                max-height: 0;\n                opacity: 0;\n                padding: 0 20px;\n                background: var(--white);\n                overflow: hidden;\n              }\n              .card.show {\n                max-height: 500px;\n                opacity: 1;\n                padding: 20px 0;\n                border-radius: 0 0 8px 8px;\n                border: 1px solid var(--color-dark-gray);\n                border-top: none;\n              }\n              .email, .bio {\n                margin: 0 20px;\n                font-size: var(--normal-text);\n                color: var(--text);\n              }\n              .email a {\n                color: var(--color-light);\n                text-decoration: none;\n              }\n              .email a:hover {\n                text-decoration: underline;\n              }\n            </style>\n            <div style="height: 5px;"></div>\n            <div class="name-role">${n}: ${t}</div>\n            <div class="card">\n              <div class="email">Email: <a href="mailto:${e}">${e}</a></div>\n              ${o?`<div class=bio>Bio: ${o}</div>`:""}\n            </div>\n            <div style="height: 5px;"></div>\n          `,this.addEventListener("mouseenter",this.showCard.bind(this)),this.addEventListener("mouseleave",this.hideCard.bind(this))}showCard(){this.shadowRoot.querySelector(".card").classList.add("show");this.shadowRoot.querySelector(".name-role").classList.add("show")}hideCard(){this.shadowRoot.querySelector(".card").classList.remove("show");this.shadowRoot.querySelector(".name-role").classList.remove("show")}}customElements.define("m-info",InfoCard)}(),function(){class SpinDropdown extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.isOpen=!1,this.closeDropdown=this.closeDropdown.bind(this),this.handleDocumentClick=this.handleDocumentClick.bind(this)}connectedCallback(){this.render(),this.setupEventListeners()}disconnectedCallback(){document.removeEventListener("click",this.handleDocumentClick)}async render(){const t=this.getAttribute("text")||"Dropdown",n=this.getAttribute("color")||"var(--color-light)",e=this.getAttribute("highlight")||"var(--white)",o=this.getAttribute("ionIcon")||"arrow-down-circle",s=this.getAttribute("svg"),i=this.getAttribute("content")||"";if(this.shadowRoot.innerHTML=`\n          <style>\n            :host {\n              display: block;\n              width: 100%;\n              font-family: 'Lato', sans-serif;\n            }\n            .button {\n              display: flex;\n              height: 50px;\n              width: 100%;\n              background-color: ${n};\n              border-radius: 5px;\n              font-size: 20px;\n              align-items: center;\n              cursor: pointer;\n              transition: all 0.3s ease, border-radius 0.3s ease;\n            }\n            .button:hover {\n              filter: brightness(90%);\n            }\n            .button.open {\n              border-radius: 5px 5px 0 0;\n            }\n            .boxText {\n              flex: 1;\n              padding-left: 5%;\n              color: ${e};\n              font-weight: 750;\n              white-space: nowrap;\n              overflow: hidden;\n              text-overflow: ellipsis;\n            }\n            .boxIcon {\n              position: relative;\n              width: 80px;\n              height: 100%;\n              background-color: ${e};\n              display: flex;\n              align-items: center;\n              justify-content: flex-end;\n              border-radius: 0 5px 5px 0;\n              clip-path: polygon(40px 0, 100% 0, 100% 100%, 0% 100%);\n              overflow: hidden;\n            }\n            .button.open .boxIcon {\n              border-radius: 0 5px 0 0;\n            }\n            .boxIcon ion-icon {\n              font-size: 50px;\n              position: absolute;\n              right: 25px;\n              top: 50%;\n              transform: translateY(-50%);\n              color: ${n};\n              transition: transform 0.3s ease;\n            }\n            .svg-container svg {\n              position: absolute;\n              right: 25px;\n              top: 50%;\n              transform: translateY(-50%);\n              width: 30px;\n              height: 30px;\n              transition: transform 0.3s ease;\n            }\n            .content {\n              transform: translateY(-1px);\n              background-color: ${e};\n              border-radius: 0 0 5px 5px;\n              box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n              transition: max-height 0.3s ease, opacity 0.3s ease, padding 0.3s ease;\n              max-height: 0;\n              opacity: 0;\n              overflow: hidden;\n              padding: 0 20px;\n              font-size: 16px;\n              color: ${n};\n            }\n            .content.show {\n              max-height: 500px;\n              opacity: 1;\n              padding: 20px;\n              border: 1px solid rgba(0, 0, 0, 0.1);\n              border-top: none;\n            }\n            .button.open .boxIcon ion-icon,\n            .button.open .svg-container svg {\n              transform: translateY(-50%) rotate(180deg);\n            }\n            .icon-body {\n              fill: ${n};\n            }\n            .icon-accent {\n              fill: color-mix(in srgb, ${n} 85%, black);\n            }\n          </style>\n          <div class="button">\n            <span class="boxText">${t}</span>\n            <span class="boxIcon">\n              ${s?'<div class="svg-container"></div>':`<ion-icon name="${o}"></ion-icon>`}\n            </span>\n          </div>\n          <div class="content">\n            ${i}\n            <slot></slot>\n          </div>\n        `,s)try{const t=await fetch(s),n=await t.text(),e=this.shadowRoot.querySelector(".svg-container");e.innerHTML=n;const o=e.querySelector("svg");o&&o.setAttribute("preserveAspectRatio","xMidYMid meet")}catch(t){console.error("Error loading SVG:",t);this.shadowRoot.querySelector(".svg-container").innerHTML=`<ion-icon name="${o}"></ion-icon>`}this.button=this.shadowRoot.querySelector(".button"),this.content=this.shadowRoot.querySelector(".content")}setupEventListeners(){this.button.addEventListener("click",this.toggleDropdown.bind(this)),document.addEventListener("click",this.handleDocumentClick)}toggleDropdown(t){t.stopPropagation(),this.isOpen?this.closeDropdown():this.openDropdown()}openDropdown(){this.isOpen=!0,this.content.classList.add("show"),this.button.classList.add("open")}closeDropdown(){this.isOpen=!1,this.content.classList.remove("show"),this.button.classList.remove("open")}handleDocumentClick(t){!this.contains(t.target)&&this.isOpen&&this.closeDropdown()}static get observedAttributes(){return["text","color","highlight","ionIcon","svg","content"]}attributeChangedCallback(t,n,e){n!==e&&this.render()}}customElements.define("m-drop",SpinDropdown)}(),function(){class TextBox extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}render(){const t=this.getAttribute("text-color")||"var(--text)",n=this.getAttribute("color")||"var(--white)",e=this.getAttribute("format")||"left";this.shadowRoot.innerHTML=`\n                <style>\n                    :host {\n                        display: flex;\n                        position: relative;\n                        text-align: ${e};\n                        align-items: baseline;\n                        justify-content: ${e};\n                        padding: 0 40px;\n                        color: ${t};\n                        font-weight: normal;\n                        font-size: var(--normal-text);\n                        width: calc(100% - 80px);\n                        background-color: ${n};\n                    }\n                    .text-box {\n                        display: inline-block;\n                    }\n                </style>\n                <div class="text-box"><slot></slot></div>\n            `}}customElements.define("m-text",TextBox)}(),function(){class Title extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render(),this.addParallaxEffect()}render(){const t=this.getAttribute("background"),n=this.getAttribute("background-color")||"var(--color-dark)",e=this.getAttribute("text-color")||"#ffffff",o=this.getAttribute("brightness")||.6,s=this.getAttribute("height")||"50vh",i=this.getAttribute("x")||"50%",r=this.getAttribute("y")||"50%",a=this.getAttribute("zoom")||"cover";this.shadowRoot.innerHTML=`\n                <style>\n                    :host {\n                        display: flex;\n                        position: relative;\n                        text-align: center;\n                        align-items: center;\n                        justify-content: center;\n                        color: ${e};\n                        font-weight: bold;\n                        font-size: var(--large-text);\n                        height: ${s};\n                        width: 100%;\n                        background-color: ${n};\n                        background-repeat: no-repeat;\n                        background-image: ${t?`linear-gradient(rgba(0, 0, 0, ${o}), rgba(0, 0, 0, ${o})), url(${t})`:""};\n                        background-position: ${i} ${r};\n                        background-size: ${a};\n                    }\n                    .title-text {\n                        display: inline-block;\n                    }\n                    @media screen and (max-width: 480px) {\n                        :host {\n                            background-size: cover;\n                        }\n                    }\n                </style>\n                <div class="title-text"><slot></slot></div>\n            `}addParallaxEffect(){if(this.getAttribute("speed")){const t=this.getAttribute("speed");window.addEventListener("scroll",(()=>{const n=document.documentElement.scrollTop;this.style.backgroundPosition=`center calc(50% - ${n*t}px)`}))}}}customElements.define("m-title",Title)}(),function(){class UpcomingEvents extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}async connectedCallback(){const t=this.getAttribute("types")?this.getAttribute("types").split(" "):[],n=await this.fetchEvents(),e=this.filterEvents(n,t);this.render(e)}async fetchEvents(){try{const t=await fetch("./schedule.json");if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const n=await t.json(),e=new Date;return n.filter((t=>{const n=new Date(t.end)>=e,o=!t.hide;return n&&o}))}catch(t){return console.error("Error fetching events:",t),[]}}filterEvents(t,n){if(0===n.length)return t;return t.filter((t=>t.type&&n.includes(t.type)))}render(t){const n=document.createElement("div");n.setAttribute("class","events-container"),t.forEach((t=>{const e=this.createEventElement(t);n.appendChild(e)})),this.shadowRoot.appendChild(n)}createEventElement(t){const n=document.createElement("div");n.setAttribute("class","event");let e="",o="",s="",i="",r=t.color||"var(--color-light-gray)";return t.who&&(e=`<m-text format="center"><strong>Who:</strong> ${t.who}</m-text>`),t.cost&&(o=`<m-text format="center"><strong>Cost:</strong> ${t.cost}</m-text>`),t.prepare&&(s=`<m-text format="center"><strong>What to Prepare:</strong> ${t.prepare}</m-text>`),t.link&&(i=`<m-text format="center"><strong>Link:</strong> <a style="color: ${r};" href="${t.link}">${t.link}</a></m-text>`),n.innerHTML=`\n            <m-spacer color="${r}"></m-spacer>\n            <m-spacer></m-spacer>\n            <m-alt-title>${t.text}</m-alt-title>\n            <m-spacer></m-spacer>\n            <m-text format="center"><strong>Where:</strong> ${t.location||"TBD"}</m-text>\n            <m-text format="center"><strong>When:</strong> ${t.when||"TBD"}</m-text>\n            ${e}\n            ${o}\n            ${s}\n            ${i}\n            <m-spacer></m-spacer>\n          `,n.style.border=`1px solid ${r}`,n.style.borderRadius="5px",n.style.marginBottom="20px",n.style.padding="10px",n}}customElements.define("m-events",UpcomingEvents)}(),function(){class Spacer extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}static get observedAttributes(){return["width","height","color"]}attributeChangedCallback(t,n,e){this.render()}render(){this.shadowRoot.innerHTML=`\n                <style>\n                    .spacer {\n                        display: flex;\n                        width: ${this.getAttribute("width")||"100%"};\n                        height: ${this.getAttribute("height")||"2vh"};\n                        background-color: ${this.getAttribute("color")||"none"};\n                    }\n                </style>\n                <div class="spacer"></div>\n            `}}window.customElements.define("m-spacer",Spacer)}(),function(){class SpinButton extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}async render(){const t=this.getAttribute("link")||"about:blank",n=this.getAttribute("color")||"var(--color-light)",e=this.getAttribute("highlight")||"var(--white)",o=this.getAttribute("ionIcon"),s=this.getAttribute("svg"),i=this.getAttribute("text"),r="_"+(this.getAttribute("target")||"blank");this.shadowRoot.innerHTML=`\n          <style>\n            :host {\n              display: block;\n              width: 100%;\n            }\n            .button {\n              display: flex;\n              height: 50px;\n              width: 100%;\n              outline: none;\n              background-color: ${n};\n              border-radius: 5px;\n              font-size: 20px;\n              align-items: center;\n              text-decoration: none;\n              overflow: hidden;\n              transition: all 0.1s ease;\n            }\n            .button .boxText {\n              flex: 1;\n              padding-left: 5%;\n              color: ${e};\n              font-family: 'Lato', sans-serif;\n              font-weight: 750;\n              white-space: nowrap;\n              overflow: hidden;\n              text-overflow: ellipsis;\n            }\n            .button:hover {\n              transform: scale(1.05);\n              filter: brightness(95%);\n            }\n            .button .boxIcon {\n              position: relative;\n              width: 80px;\n              height: 100%;\n              background-color: ${e};\n              display: flex;\n              align-items: center;\n              justify-content: flex-end;\n              clip-path: polygon(40px 0, 100% 0, 100% 100%, 0% 100%);\n              overflow: hidden;\n            }\n            .button .boxIcon ion-icon {\n              font-size: 50px;\n              position: absolute;\n              right: 30px;\n              top: 50%;\n              transform: translateY(-50%);\n              color: ${n};\n            }\n            .svg-container svg {\n              position: absolute;\n              right: 30px;\n              top: 50%;\n              transform: translateY(-50%);\n              width: 50px;\n              height: 50px;\n            }\n            .button:hover .ionIcon,\n            .button:hover .svg-container svg {\n              animation: rotate 0.6s ease-in-out;\n            }\n            .icon-body {\n              fill: ${n};\n            }\n            .icon-accent {\n              fill: color-mix(in srgb, ${n} 85%, black);\n            }\n            @keyframes rotate {\n              from { transform: translateY(-50%) rotate(0deg); }\n              to { transform: translateY(-50%) rotate(360deg); }\n            }\n          </style>\n          <a class="button" target="${r}">\n            <span class="boxText"></span>\n            <span class="boxIcon">\n              ${s?'<div class="svg-container"></div>':'<ion-icon class="ionIcon"></ion-icon>'}\n            </span>\n          </a>\n        `;const a=this.shadowRoot.querySelector(".button"),l=this.shadowRoot.querySelector(".boxText");if(a.href=t,l.textContent=i,s)try{const t=await fetch(s),n=await t.text(),e=this.shadowRoot.querySelector(".svg-container");e.innerHTML=n;const o=e.querySelector("svg");o&&o.setAttribute("preserveAspectRatio","xMidYMid meet")}catch(t){console.error("Error loading SVG:",t);this.shadowRoot.querySelector(".svg-container").innerHTML='<ion-icon class="ionIcon"></ion-icon>'}if(!s&&o){this.shadowRoot.querySelector(".ionIcon").name=o}else if(!s){const t=this.shadowRoot.querySelector(".boxIcon ion-icon")||this.shadowRoot.querySelector(".boxIcon .svg-container");t&&(t.style.display="none")}}}customElements.define("m-button",SpinButton)}()}(),"undefined"!=typeof module&&module.exports&&(module.exports={}),"function"==typeof define&&define.amd&&define([],(function(){return{}}));